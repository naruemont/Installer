#!/bin/sh
MAJOR    = 0
MINOR    = 0
PATCH    = 1
BUILD    = 1
SUFFIX 	 = crypto-trading
CHOST	 = x86_64-linux-gnu	 
VERSION  = master\(v0.0.1.1-x86_64-linux-gnu-crypto-trading\)

packages:
	test -n "`command -v apt-get`" && sudo apt-get -y install g++ build-essential automake autoconf libtool libxml2 libxml2-dev zlib1g-dev openssl stunnel python curl gzip screen libboost-all-dev libmysqlclient-dev\
	|| (test -n "`command -v yum`" && sudo yum -y install gcc-c++ automake autoconf libtool libxml2 libxml2-devel openssl stunnel python curl gzip screen libboost-all-dev libmysqlclient-dev) \
	|| (test -n "`command -v brew`" && (xcode-select --install || :) && (brew install automake autoconf libxml2 sqlite openssl zlib stunnel python curl libboost-all-dev gzip proctools libmysqlclient-dev || brew upgrade || :)) \
	|| (test -n "`command -v pacman`" && sudo pacman --noconfirm -S --needed base-devel libxml2 zlib sqlite curl libcurl-compat openssl stunnel python gzip screen libboost-all-dev libmysqlclient-dev)
	#sudo mkdir -p /data/db/
	#sudo chown $(shell id -u) /data/db
	
mysql-server:
	test -n "`command -v apt-get`" && sudo apt-get install mysql-server && sudo systemctl start mysql && \
	sudo systemctl enable mysql && mysql -e "CREATE DATABASE IF NOT EXISTS K;"
	
git-clone:
	@echo "Initialization Clone Project ($(VERSION))" && git clone --branch $(VERSION) git@github.com:noppakao/CryptoTrading.git && mv ./CryptoTrading/* . && rm -R CryptoTrading

link:
	cd app/server && ln -f -s ../../$(KLOCAL)/bin/K-$(CHOST) K
	test -n "`ls *.sh 2>/dev/null`" || (cp etc/K.sh.dist K.sh && chmod +x K.sh)
	@$(MAKE) gdax -s


credentials: 
	test -f ~/.ssh/id_rsa || (				\
	read -p "Please Enter Your Email:" email;	\
	ssh-keygen -t rsa -b 4096 -C $$email);)
	eval `ssh-agent` && ssh-add ~/.ssh/id_rsa
	@echo "Please Add SSH key to your github account:" && cat ~/.ssh/id_rsa.pub

	
install:
	@$(MAKE) packages mysql-server			
	@yes = | head -n`expr $(shell tput cols) / 2` | xargs echo && echo " _  __\n| |/ /  lastest version v$(MAJOR).$(MINOR).$(PATCH).$(BUILD)\n| ' /\n| . \\   Select your version\n|_|\\_\\  to clone project:\n"
	@echo $(VERSION) | tr ' ' "\n" | cat -n
	@read -p "[$(shell seq -s / `echo $(VERSION) | tr ' ' "\n" | wc -l`)]: " selected_version && $(MAKE) git-clone VERSION=`echo $(VERSION) | cut -d ' ' -f$${selected_version} | cut -d '(' -f 1`
	$(MAKE) link 
	@echo "Finished Installation"
